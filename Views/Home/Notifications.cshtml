@using Newtonsoft.Json
@model IEnumerable<WeatherApp.Models.TempratureData>

@{
    ViewData["Title"] = "Notifications Page";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Temperature Notifications</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
</head>
<body>
    <div class="container">
        <h1 class="display-4 text-center">Overheating Notifications</h1>

        @{
            var maxTemperature = Model.Any() ? Model.Max(record => record.Temperature) : (double?)null;



            string maintenanceMessage = null;

            string alertClass = "alert-primary"; // Default blue color for general prediction

            // Additional check based on the API service results

            string apiPrediction = await WeatherApp.API.InvokeRequestResponseService();
        }

        @if (maxTemperature.HasValue && maxTemperature > 120)

        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
  <strong>Holy guacamole!</strong> You should check in on some of those fields below.
  
</div>
        }

        else

        {
            <div class="alert alert-success" role="alert">
                No records above 120&deg;C detected.
            </div>
        }

        <!-- Breakdown Prediction Section -->
        <div class="alert alert-info" role="alert">
            <strong>Breakdown Prediction:</strong>
            @{
                if (apiPrediction == "true")
                {
                    @:There could be a possible engine breakdown due to overheating.
                }
                else if (apiPrediction == "false")
                {
                    @:No risk of engine breakdown detected.
                }
                else
                {
                    @:Nothing to say about any breakdown problem.
                }
            }
        </div>

        <!-- Note Section (Days until possible breakdown) -->
        @if (!string.IsNullOrEmpty(maintenanceMessage))

        {
            <div class="alert @alertClass" role="alert">
                <strong>Note:</strong> The breakdown could occur in @maintenanceMessage based on temperature data.
            </div>
        }

        @if (Model.Any())

        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Creation Time</th>
                        <th>Temperature</th>
                        <th>Info</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var record in Model)
                    {
                        <tr>
                            <td>
                                @{
                                    var formattedDate = record.CreationTime.HasValue

                                    ? record.CreationTime.Value.AddHours(2).ToString("yyyy-MM-dd   HH:mm:ss")

                                    : "Date not available";
                                }
                                @formattedDate
                            </td>
                            <td>@record.Temperature</td>
                            <td>@record.Info</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        else

        {
            <div class="alert alert-info" role="alert">
                No temperature records available.
            </div>
        }
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
</body>
</html>
